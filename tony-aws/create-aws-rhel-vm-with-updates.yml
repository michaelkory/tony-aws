---
- name: Provision and Update AWS instances
  hosts: localhost
  connection: local
  gather_facts: False

  # load AWS variables from this group vars file
  vars_files:
  - group_vars/all

  tasks:
  - name: Launch {{ec2_instance_count}} AWS instances for jboss_demo
    ec2:
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      group: "{{ ec2_security_group }}"
      type: "{{ ec2_instance_type }}"
      image: "{{ ec2_image }}"
      region: "{{ ec2_region }}"
      instance_tags: "{'ansible_group':'jboss', 'type':'{{ ec2_instance_type }}', 'group':'{{ ec2_security_group }}', 'Name':'{{ tower_user_name }}''_jboss_demo'}"
      count: "{{ ec2_instance_count }}"
      wait: true
    register: ec2

  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_dns_name }}"
      port: 22
      delay: 60
      timeout: 320
      state: started
    with_items: "{{ ec2.instances }}"
    async: 250
    poll: 0
    register: wait_result

  - name: wait_for - check on async task
    async_status:
      jid: "{{ item.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 300
    with_items: "{{wait_result.results}}"

  - name: Add hosts to in memory inventory
    add_host:
      name: "{{ item.public_dns_name }}"
      ansible_host: "{{ item.public_dns_name }}"
      ansible_user: ec2-user
      groups: new-hosts
    with_items:
      - "{{ ec2.instances }}"

- name: Apply Updates and Config Changes to new AWS Instances
  hosts: new-hosts
  tasks:

  - name: Apply Yum Updates
    yum:
      name: "*"
      state: latest
    become: true
    register: updates_result

  - name: Reboot Systems if Necessary
    block:
      - name: Get System Uptime
        command: uptime
        register: uptime_result

      - name: show uptime command results
        debug:
          var: uptime_result.stdout

      - name: Reboot RHEL6- Servers 
        command: shutdown -r +1 "Ansible Updates Triggered" 
        become: true
        async: 0
        poll: 0
        when: ansible_distribution_major_version < "7" 

      - name: Reboot RHEL7+ Servers 
        command: shutdown -r +1 --no-wall "Ansible Updates Triggered" 
        become: true
        async: 0
        poll: 0
        when: ansible_distribution_major_version >= "7" 

      - name: wait for Instances to reboot
        wait_for:
          port: 22
          host: "{{ inventory_hostname }}"
          state: started
          delay: 80
          timeout: 200
        become: false
        delegate_to: localhost
    when: updates_result.changed

  - name: Get System Uptime Again to Validate Reboot or Not
    shell: uptime
    register: uptime_result

  - name: show uptime command results
    debug:
      var: uptime_result.stdout

...
